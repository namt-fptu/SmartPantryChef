<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/fpt/edu/vn/smartpantrychef/MainActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/fpt/edu/vn/smartpantrychef/MainActivity.java" />
              <option name="originalContent" value="package fpt.edu.vn.smartpantrychef;&#10;&#10;import android.Manifest;&#10;import android.content.Intent;&#10;import android.content.pm.PackageManager;&#10;import android.graphics.Bitmap;&#10;import android.net.Uri;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.provider.MediaStore;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.content.ContextCompat;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.google.android.material.chip.Chip;&#10;import com.google.mlkit.vision.common.InputImage;&#10;import com.google.mlkit.vision.label.ImageLabel;&#10;import com.google.mlkit.vision.label.ImageLabeler;&#10;import com.google.mlkit.vision.label.ImageLabeling;&#10;import com.google.mlkit.vision.label.defaults.ImageLabelerOptions;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;&#10;import fpt.edu.vn.smartpantrychef.databinding.ActivityMainBinding;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;MainActivity&quot;;&#10;&#10;    private ActivityMainBinding binding;&#10;    private Bitmap capturedBitmap;&#10;&#10;    // Trình khởi chạy yêu cầu quyền&#10;    private ActivityResultLauncher&lt;String&gt; requestCameraPermissionLauncher;&#10;    private ActivityResultLauncher&lt;String&gt; requestGalleryPermissionLauncher;&#10;&#10;    // Trình khởi chạy camera và thư viện&#10;    private ActivityResultLauncher&lt;Void&gt; cameraLauncher;&#10;    private ActivityResultLauncher&lt;Intent&gt; galleryLauncher;&#10;&#10;    // ML Kit Image Labeler&#10;    private ImageLabeler labeler;&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        binding = ActivityMainBinding.inflate(getLayoutInflater());&#10;        setContentView(binding.getRoot());&#10;&#10;        // Khởi tạo ML Kit labeler&#10;        labeler = ImageLabeling.getClient(ImageLabelerOptions.DEFAULT_OPTIONS);&#10;&#10;        // Khởi tạo trình khởi chạy yêu cầu quyền camera&#10;        requestCameraPermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -&gt; {&#10;            if (isGranted) {&#10;                Toast.makeText(this, &quot;Quyền camera đã được cấp&quot;, Toast.LENGTH_SHORT).show();&#10;                openCamera();&#10;            } else {&#10;                showPermissionDeniedDialog(&quot;Cần quyền camera để chụp ảnh nguyên liệu.&quot;);&#10;            }&#10;        });&#10;&#10;        // Khởi tạo trình khởi chạy yêu cầu quyền truy cập thư viện&#10;        requestGalleryPermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -&gt; {&#10;            if (isGranted) {&#10;                Toast.makeText(this, &quot;Quyền truy cập thư viện đã được cấp&quot;, Toast.LENGTH_SHORT).show();&#10;                openGallery();&#10;            } else {&#10;                showPermissionDeniedDialog(&quot;Cần quyền truy cập thư viện để chọn ảnh.&quot;);&#10;            }&#10;        });&#10;&#10;        // Khởi tạo trình khởi chạy camera&#10;        cameraLauncher = registerForActivityResult(new ActivityResultContracts.TakePicturePreview(), this::handleImageResult);&#10;&#10;        // Khởi tạo trình khởi chạy thư viện&#10;        galleryLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -&gt; {&#10;            if (result.getResultCode() == RESULT_OK &amp;&amp; result.getData() != null) {&#10;                Uri imageUri = result.getData().getData();&#10;                try {&#10;                    Bitmap bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), imageUri);&#10;                    handleImageResult(bitmap);&#10;                } catch (IOException e) {&#10;                    Log.e(TAG, &quot;Error converting URI to Bitmap&quot;, e);&#10;                    Toast.makeText(this, &quot;Không thể tải ảnh từ thư viện&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            } else {&#10;                Toast.makeText(this, &quot;Đã hủy chọn ảnh&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;&#10;        // Thiết lập sự kiện click&#10;        binding.tvEmptyState.setOnClickListener(v -&gt; openCamera());&#10;        binding.btnRetake.setOnClickListener(v -&gt; openCamera());&#10;        binding.btnChooseFromGallery.setOnClickListener(v -&gt; openGallery());&#10;    }&#10;&#10;    // Xử lý kết quả ảnh (từ camera hoặc thư viện)&#10;    private void handleImageResult(Bitmap bitmap) {&#10;        if (bitmap != null) {&#10;            try {&#10;                capturedBitmap = bitmap;&#10;                binding.tvEmptyState.setVisibility(View.GONE);&#10;                binding.cardPreview.setVisibility(View.VISIBLE);&#10;                binding.buttonsLayout.setVisibility(View.VISIBLE);&#10;                Glide.with(this).load(capturedBitmap).into(binding.ivImage);&#10;                Toast.makeText(this, &quot;Đang phân tích ảnh...&quot;, Toast.LENGTH_SHORT).show();&#10;                analyzeImage(capturedBitmap);&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Error processing image result&quot;, e);&#10;                Toast.makeText(this, &quot;Có lỗi xảy ra khi xử lý ảnh&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        } else {&#10;            Toast.makeText(this, &quot;Không nhận được ảnh&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    // Kiểm tra và yêu cầu quyền truy cập camera&#10;    private void openCamera() {&#10;        if (checkCameraPermission()) {&#10;            try {&#10;                cameraLauncher.launch(null);&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Cannot open camera&quot;, e);&#10;                Toast.makeText(this, &quot;Không thể mở camera&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    // Kiểm tra và yêu cầu quyền truy cập thư viện&#10;    private void openGallery() {&#10;        if (checkGalleryPermission()) {&#10;            Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#10;            galleryLauncher.launch(intent);&#10;        }&#10;    }&#10;&#10;    // Kiểm tra quyền truy cập camera&#10;    private boolean checkCameraPermission() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {&#10;            return true;&#10;        } else {&#10;            requestCameraPermissionLauncher.launch(Manifest.permission.CAMERA);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Kiểm tra quyền truy cập thư viện&#10;    private boolean checkGalleryPermission() {&#10;        String permission = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU ?&#10;                Manifest.permission.READ_MEDIA_IMAGES : Manifest.permission.READ_EXTERNAL_STORAGE;&#10;&#10;        if (ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED) {&#10;            return true;&#10;        } else {&#10;            requestGalleryPermissionLauncher.launch(permission);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Hiển thị hộp thoại khi quyền bị từ chối&#10;    private void showPermissionDeniedDialog(String message) {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Yêu cầu quyền&quot;)&#10;                .setMessage(message + &quot; Vui lòng cấp quyền trong cài đặt ứng dụng.&quot;)&#10;                .setPositiveButton(&quot;OK&quot;, (dialog, which) -&gt; dialog.dismiss())&#10;                .create()&#10;                .show();&#10;    }&#10;&#10;    // Phân tích ảnh bằng ML Kit&#10;    private void analyzeImage(Bitmap bitmap) {&#10;        if (bitmap == null) {&#10;            Toast.makeText(this, &quot;Ảnh không hợp lệ&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;        binding.progressBar.setVisibility(View.VISIBLE);&#10;        binding.btnFindRecipe.setVisibility(View.GONE);&#10;        binding.chipGroupIngredients.removeAllViews();&#10;&#10;        InputImage image = InputImage.fromBitmap(bitmap, 0);&#10;        labeler.process(image)&#10;                .addOnSuccessListener(labels -&gt; {&#10;                    ArrayList&lt;String&gt; detectedIngredients = new ArrayList&lt;&gt;();&#10;                    for (ImageLabel label : labels) {&#10;                        if (label.getConfidence() &gt; 0.6f) {&#10;                            String ingredient = label.getText();&#10;                            detectedIngredients.add(ingredient);&#10;                            addIngredientChip(ingredient);&#10;                        }&#10;                    }&#10;                    binding.progressBar.setVisibility(View.GONE);&#10;                    if (!detectedIngredients.isEmpty()) {&#10;                        binding.layoutIngredientsSection.setVisibility(View.VISIBLE);&#10;                        binding.btnFindRecipe.setVisibility(View.VISIBLE);&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không phát hiện nguyên liệu nào&quot;, Toast.LENGTH_SHORT).show();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    binding.progressBar.setVisibility(View.GONE);&#10;                    Log.e(TAG, &quot;Image labeling failed&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi phân tích ảnh: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    // Thêm chip nguyên liệu vào ChipGroup&#10;    private void addIngredientChip(String ingredient) {&#10;        Chip chip = new Chip(this);&#10;        chip.setText(ingredient);&#10;        chip.setCloseIconVisible(true);&#10;        chip.setOnCloseIconClickListener(v -&gt; binding.chipGroupIngredients.removeView(chip));&#10;        binding.chipGroupIngredients.addView(chip);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package fpt.edu.vn.smartpantrychef;&#10;&#10;import android.Manifest;&#10;import android.content.Intent;&#10;import android.content.pm.PackageManager;&#10;import android.graphics.Bitmap;&#10;import android.net.Uri;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.provider.MediaStore;&#10;import android.util.Log;&#10;import android.view.View;&#10;import android.widget.Toast;&#10;&#10;import androidx.activity.result.ActivityResultLauncher;&#10;import androidx.activity.result.contract.ActivityResultContracts;&#10;import androidx.appcompat.app.AlertDialog;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import androidx.core.content.ContextCompat;&#10;import androidx.lifecycle.ViewModelProvider;&#10;&#10;import com.bumptech.glide.Glide;&#10;import com.google.android.material.chip.Chip;&#10;import com.google.mlkit.vision.common.InputImage;&#10;import com.google.mlkit.vision.label.ImageLabel;&#10;import com.google.mlkit.vision.label.ImageLabeler;&#10;import com.google.mlkit.vision.label.ImageLabeling;&#10;import com.google.mlkit.vision.label.defaults.ImageLabelerOptions;&#10;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;import fpt.edu.vn.smartpantrychef.databinding.ActivityMainBinding;&#10;&#10;public class MainActivity extends AppCompatActivity {&#10;&#10;    private static final String TAG = &quot;MainActivity&quot;;&#10;&#10;    private ActivityMainBinding binding;&#10;    private Bitmap capturedBitmap;&#10;&#10;    // Trình khởi chạy yêu cầu quyền&#10;    private ActivityResultLauncher&lt;String&gt; requestCameraPermissionLauncher;&#10;    private ActivityResultLauncher&lt;String&gt; requestGalleryPermissionLauncher;&#10;&#10;    // Trình khởi chạy camera và thư viện&#10;    private ActivityResultLauncher&lt;Void&gt; cameraLauncher;&#10;    private ActivityResultLauncher&lt;Intent&gt; galleryLauncher;&#10;&#10;    // ML Kit Image Labeler&#10;    private ImageLabeler labeler;&#10;&#10;    private MainViewModel viewModel;&#10;    private List&lt;String&gt; detectedIngredients = new ArrayList&lt;&gt;();&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        binding = ActivityMainBinding.inflate(getLayoutInflater());&#10;        setContentView(binding.getRoot());&#10;&#10;        // Khởi tạo ML Kit labeler&#10;        labeler = ImageLabeling.getClient(ImageLabelerOptions.DEFAULT_OPTIONS);&#10;&#10;        // Khởi tạo trình khởi chạy yêu cầu quyền camera&#10;        requestCameraPermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -&gt; {&#10;            if (isGranted) {&#10;                Toast.makeText(this, &quot;Quyền camera đã được cấp&quot;, Toast.LENGTH_SHORT).show();&#10;                openCamera();&#10;            } else {&#10;                showPermissionDeniedDialog(&quot;Cần quyền camera để chụp ảnh nguyên liệu.&quot;);&#10;            }&#10;        });&#10;&#10;        // Khởi tạo trình khởi chạy yêu cầu quyền truy cập thư viện&#10;        requestGalleryPermissionLauncher = registerForActivityResult(new ActivityResultContracts.RequestPermission(), isGranted -&gt; {&#10;            if (isGranted) {&#10;                Toast.makeText(this, &quot;Quyền truy cập thư viện đã được cấp&quot;, Toast.LENGTH_SHORT).show();&#10;                openGallery();&#10;            } else {&#10;                showPermissionDeniedDialog(&quot;Cần quyền truy cập thư viện để chọn ảnh.&quot;);&#10;            }&#10;        });&#10;&#10;        // Khởi tạo trình khởi chạy camera&#10;        cameraLauncher = registerForActivityResult(new ActivityResultContracts.TakePicturePreview(), this::handleImageResult);&#10;&#10;        // Khởi tạo trình khởi chạy thư viện&#10;        galleryLauncher = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -&gt; {&#10;            if (result.getResultCode() == RESULT_OK &amp;&amp; result.getData() != null) {&#10;                Uri imageUri = result.getData().getData();&#10;                try {&#10;                    Bitmap bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), imageUri);&#10;                    handleImageResult(bitmap);&#10;                } catch (IOException e) {&#10;                    Log.e(TAG, &quot;Error converting URI to Bitmap&quot;, e);&#10;                    Toast.makeText(this, &quot;Không thể tải ảnh từ thư viện&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            } else {&#10;                Toast.makeText(this, &quot;Đã hủy chọn ảnh&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;&#10;        // Initialize ViewModel&#10;        viewModel = new ViewModelProvider(this).get(MainViewModel.class);&#10;&#10;        // Observe isLoading LiveData&#10;        viewModel.getIsLoading().observe(this, isLoading -&gt; {&#10;            if (isLoading != null &amp;&amp; isLoading) {&#10;                binding.progressBar.setVisibility(View.VISIBLE);&#10;                binding.btnFindRecipe.setEnabled(false);&#10;            } else {&#10;                binding.progressBar.setVisibility(View.GONE);&#10;                binding.btnFindRecipe.setEnabled(true);&#10;            }&#10;        });&#10;&#10;        // Observe recipeResponse LiveData&#10;        viewModel.getRecipeResponse().observe(this, recipe -&gt; {&#10;            if (recipe != null &amp;&amp; !recipe.isEmpty()) {&#10;                Intent intent = new Intent(MainActivity.this, RecipeActivity.class);&#10;                intent.putExtra(&quot;RECIPE_TEXT&quot;, recipe);&#10;                startActivity(intent);&#10;            }&#10;        });&#10;&#10;        // Observe errorMessage LiveData&#10;        viewModel.getErrorMessage().observe(this, error -&gt; {&#10;            if (error != null) {&#10;                Toast.makeText(this, &quot;Lỗi: &quot; + error, Toast.LENGTH_LONG).show();&#10;            }&#10;        });&#10;&#10;        // Thiết lập sự kiện click&#10;        binding.tvEmptyState.setOnClickListener(v -&gt; openCamera());&#10;        binding.btnRetake.setOnClickListener(v -&gt; openCamera());&#10;        binding.btnChooseFromGallery.setOnClickListener(v -&gt; openGallery());&#10;        binding.btnFindRecipe.setOnClickListener(v -&gt; {&#10;            try {&#10;                detectedIngredients.clear();&#10;                for (int i = 0; i &lt; binding.chipGroupIngredients.getChildCount(); i++) {&#10;                    View chipView = binding.chipGroupIngredients.getChildAt(i);&#10;                    if (chipView instanceof Chip) {&#10;                        CharSequence text = ((Chip) chipView).getText();&#10;                        if (text != null &amp;&amp; !text.toString().trim().isEmpty()) {&#10;                            detectedIngredients.add(text.toString().trim());&#10;                        }&#10;                    }&#10;                }&#10;                if (!detectedIngredients.isEmpty()) {&#10;                    viewModel.getRecipes(detectedIngredients);&#10;                } else {&#10;                    Toast.makeText(this, &quot;Chưa có nguyên liệu nào&quot;, Toast.LENGTH_SHORT).show();&#10;                }&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Error collecting ingredients&quot;, e);&#10;                Toast.makeText(this, &quot;Lỗi khi lấy nguyên liệu: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;            }&#10;        });&#10;    }&#10;&#10;    // Xử lý kết quả ảnh (từ camera hoặc thư viện)&#10;    private void handleImageResult(Bitmap bitmap) {&#10;        if (bitmap != null) {&#10;            try {&#10;                capturedBitmap = bitmap;&#10;                binding.tvEmptyState.setVisibility(View.GONE);&#10;                binding.cardPreview.setVisibility(View.VISIBLE);&#10;                binding.buttonsLayout.setVisibility(View.VISIBLE);&#10;                Glide.with(this).load(capturedBitmap).into(binding.ivImage);&#10;                Toast.makeText(this, &quot;Đang phân tích ảnh...&quot;, Toast.LENGTH_SHORT).show();&#10;                analyzeImage(capturedBitmap);&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Error processing image result&quot;, e);&#10;                Toast.makeText(this, &quot;Có lỗi xảy ra khi xử lý ảnh&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        } else {&#10;            Toast.makeText(this, &quot;Không nhận được ảnh&quot;, Toast.LENGTH_SHORT).show();&#10;        }&#10;    }&#10;&#10;    // Kiểm tra và yêu cầu quyền truy cập camera&#10;    private void openCamera() {&#10;        if (checkCameraPermission()) {&#10;            try {&#10;                cameraLauncher.launch(null);&#10;            } catch (Exception e) {&#10;                Log.e(TAG, &quot;Cannot open camera&quot;, e);&#10;                Toast.makeText(this, &quot;Không thể mở camera&quot;, Toast.LENGTH_SHORT).show();&#10;            }&#10;        }&#10;    }&#10;&#10;    // Kiểm tra và yêu cầu quyền truy cập thư viện&#10;    private void openGallery() {&#10;        if (checkGalleryPermission()) {&#10;            Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);&#10;            galleryLauncher.launch(intent);&#10;        }&#10;    }&#10;&#10;    // Kiểm tra quyền truy cập camera&#10;    private boolean checkCameraPermission() {&#10;        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED) {&#10;            return true;&#10;        } else {&#10;            requestCameraPermissionLauncher.launch(Manifest.permission.CAMERA);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Kiểm tra quyền truy cập thư viện&#10;    private boolean checkGalleryPermission() {&#10;        String permission = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.TIRAMISU ?&#10;                Manifest.permission.READ_MEDIA_IMAGES : Manifest.permission.READ_EXTERNAL_STORAGE;&#10;&#10;        if (ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED) {&#10;            return true;&#10;        } else {&#10;            requestGalleryPermissionLauncher.launch(permission);&#10;            return false;&#10;        }&#10;    }&#10;&#10;    // Hiển thị hộp thoại khi quyền bị từ chối&#10;    private void showPermissionDeniedDialog(String message) {&#10;        new AlertDialog.Builder(this)&#10;                .setTitle(&quot;Yêu cầu quyền&quot;)&#10;                .setMessage(message + &quot; Vui lòng cấp quyền trong cài đặt ứng dụng.&quot;)&#10;                .setPositiveButton(&quot;OK&quot;, (dialog, which) -&gt; dialog.dismiss())&#10;                .create()&#10;                .show();&#10;    }&#10;&#10;    // Phân tích ảnh bằng ML Kit&#10;    private void analyzeImage(Bitmap bitmap) {&#10;        if (bitmap == null) {&#10;            Toast.makeText(this, &quot;Ảnh không hợp lệ&quot;, Toast.LENGTH_SHORT).show();&#10;            return;&#10;        }&#10;        binding.progressBar.setVisibility(View.VISIBLE);&#10;        binding.btnFindRecipe.setVisibility(View.GONE);&#10;        binding.chipGroupIngredients.removeAllViews();&#10;&#10;        InputImage image = InputImage.fromBitmap(bitmap, 0);&#10;        labeler.process(image)&#10;                .addOnSuccessListener(labels -&gt; {&#10;                    ArrayList&lt;String&gt; detectedIngredients = new ArrayList&lt;&gt;();&#10;                    for (ImageLabel label : labels) {&#10;                        if (label.getConfidence() &gt; 0.6f) {&#10;                            String ingredient = label.getText();&#10;                            detectedIngredients.add(ingredient);&#10;                            addIngredientChip(ingredient);&#10;                        }&#10;                    }&#10;                    binding.progressBar.setVisibility(View.GONE);&#10;                    if (!detectedIngredients.isEmpty()) {&#10;                        binding.layoutIngredientsSection.setVisibility(View.VISIBLE);&#10;                        binding.btnFindRecipe.setVisibility(View.VISIBLE);&#10;                    } else {&#10;                        Toast.makeText(this, &quot;Không phát hiện nguyên liệu nào&quot;, Toast.LENGTH_SHORT).show();&#10;                    }&#10;                })&#10;                .addOnFailureListener(e -&gt; {&#10;                    binding.progressBar.setVisibility(View.GONE);&#10;                    Log.e(TAG, &quot;Image labeling failed&quot;, e);&#10;                    Toast.makeText(this, &quot;Lỗi phân tích ảnh: &quot; + e.getMessage(), Toast.LENGTH_SHORT).show();&#10;                });&#10;    }&#10;&#10;    // Thêm chip nguyên liệu vào ChipGroup&#10;    private void addIngredientChip(String ingredient) {&#10;        Chip chip = new Chip(this);&#10;        chip.setText(ingredient);&#10;        chip.setCloseIconVisible(true);&#10;        chip.setOnCloseIconClickListener(v -&gt; binding.chipGroupIngredients.removeView(chip));&#10;        binding.chipGroupIngredients.addView(chip);&#10;    }&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        // Clean up resources if needed&#10;        // Example: labeler.close(); if labeler implements Closeable&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/styles.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/styles.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;!-- Material Design 3 Chip Suggestion Style --&gt;&#10;    &lt;style name=&quot;Widget.Material3.Chip.Suggestion&quot; parent=&quot;Widget.MaterialComponents.Chip&quot;&gt;&#10;        &lt;item name=&quot;chipBackgroundColor&quot;&gt;?attr/colorSurface&lt;/item&gt;&#10;        &lt;item name=&quot;chipStrokeColor&quot;&gt;?attr/colorOutline&lt;/item&gt;&#10;        &lt;item name=&quot;chipStrokeWidth&quot;&gt;1dp&lt;/item&gt;&#10;        &lt;item name=&quot;android:textColor&quot;&gt;?attr/colorOnSurface&lt;/item&gt;&#10;        &lt;item name=&quot;closeIconTint&quot;&gt;?attr/colorOnSurface&lt;/item&gt;&#10;    &lt;/style&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>